let emptyTree := unit
in
let proc leaf(n) =
  {v := n, l := emptyTree, r := emptyTree}
in
let proc makeLtree(n, lp) =
  {v := n, l := lp, r := emptyTree}
in
let proc makeRtree(n, rp) =
  {v := n, l := emptyTree, r := rp}
in
let proc makeTree(n, lp, rp) =
  {v := n, l := lp, r := rp}
in

let proc isEmpty(t) = 
  if (t = emptyTree) then true else false
in
let proc rTree(t) = 
  t.r
in
let proc lTree(t) = 
  t.l
in
let proc nodeVal(t) =
  t.v
in

let proc dft(t) = 
  if (isEmpty(t)) then
    unit 
  else (
    write t.v;
    dft (t.l);
    dft (t.r)
  )
in

(* queue implement *)
let proc enQ(n, q) =
  if (q = unit) then (
    q := {v := n, next := unit};
    unit
  ) 
  else (
    let next := q.next in
    enQ<n, next>;
    q.next := next
  )
in
let proc deQ(q) =
  let v := q.v in
  q := q.next;
  v
in

(* breadth first search *)
let proc bft(t) = 
  let myQ := unit in
  enQ<t, myQ>;
  while (not (isEmpty(myQ)))
  do (
    let tree := deQ<myQ> in
    if (isEmpty(tree)) then 
      unit
    else (
      let l := tree.l in
      let r := tree.r in
      write (tree.v);
      enQ<l, myQ>;
      enQ<r, myQ>
    )
  )
in
2017
